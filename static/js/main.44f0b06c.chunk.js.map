{"version":3,"sources":["config.js","componenets/Card.js","componenets/Timer.js","componenets/Board.js","App.js","index.js"],"names":["config","too_easy","grid_w","grid_l","mine_num","easy","kinda_easy","Card","data","updateBoard","flagCard","incrementFlagCount","incrementMoveCount","decrementFlagCount","useState","timerID","settimerID","isLongPressing","setIsLongPressing","style","color","colourful_Number_Card","value","background","revealed","o","Math","round","r","random","toFixed","random_rgba","x","y","reavledBackgroundColor","unreavledBackgroundColor","cardBackgroundColor","rightClicking","e","console","log","preventDefault","className","onClick","onContextMenu","onTouchStart","pointerType","setTimeout","longPressPointerDown","onTouchEnd","clearTimeout","longPressPointerUp","onPointerLeave","flagged","src","alt","id","cardContent","Timer","gameOver","sendTime","Date","toLocaleTimeString","time","setTime","seconds_Passed","useRef","useEffect","timeout","date","current","clearInterval","role","aria-label","Board","board","setBoard","level","setLevel","mineLocation","setMineLocations","moveCount","setMoveCount","flagCount","setFlagCount","mineCount","setMineCount","elapsedTime","setGame","new_Board","first_move","i","push","j","populate_Empty_Board","inject_Mines","calculate_Card_Value","create_Board","prevCount","notadjacent","tx","ty","xi","yi","minereveal","mine","getRandomInt","surround_mine_num","max","floor","sendEndGameMessage","win","end_game_message","document","getElementById","visibility","innerHTML","updated_board","new_board","first_move_Portection","length","revealAllMines","revealCard","checkNonMinesAmount","checkWinGame","non_mine_num","revealAdjacentCard","indexBoundsCheck","type","defaultChecked","map","row","key","App","html","querySelector","clientWidth","clientHeight","ReactDOM","render","StrictMode"],"mappings":"+MAkBeA,EAlBA,CACXC,SAAU,CACNC,OAAQ,EACRC,OAAQ,EACRC,SAAU,GAEdC,KAAM,CACFH,OAAQ,GACRC,OAAQ,EACRC,SAAU,IAEdE,WAAY,CACRJ,OAAQ,GACRC,OAAQ,GACRC,SAAU,KCZH,SAASG,EAAT,GAA4G,IAA5FC,EAA2F,EAA3FA,KAAMC,EAAqF,EAArFA,YAAaC,EAAwE,EAAxEA,SAA8BC,GAA0C,EAA9DC,mBAA8D,EAA1CD,oBAAoBE,EAAsB,EAAtBA,mBAAsB,EAC1FC,oBAAS,GADiF,mBACjHC,EADiH,KACxGC,EADwG,OAE5EF,oBAAS,GAFmE,mBAEjHG,EAFiH,KAEjGC,EAFiG,KAWxH,IA8BMC,EAAQ,CACZC,MAAOC,EAAsBb,EAAKc,OAClCC,WAd0B,SAACf,GAC3B,OAAIA,EAAKgB,UAA2B,MAAfhB,EAAKc,MAxB5B,WACE,IAAIG,EAAIC,KAAKC,MAAOC,EAAIF,KAAKG,OAC7B,MAAO,QAAUJ,EADwB,IACtBG,KAAW,IAAMH,EADK,IACHG,KAAW,IAAMH,EADd,IACgBG,KAAW,IAAMA,IAAIE,QAAQ,GAAK,IAuBlFC,GAELvB,EAAKgB,UAA2B,MAAfhB,EAAKc,MAbG,SAACd,GAC9B,OAAKA,EAAKwB,EAAIxB,EAAKyB,GAAK,IAAM,EACrB,UAGA,UASAC,CAAuB1B,GAE3BA,EAAKgB,cAAV,EAzB+B,SAAChB,GAChC,OAAKA,EAAKwB,EAAIxB,EAAKyB,GAAK,IAAM,EACrB,UAGA,UAqBAE,CAAyB3B,GAMtB4B,CAAoB5B,IAO5B6B,EAAgB,SAACC,GACrBC,QAAQC,IAAI,iBACZF,EAAEG,iBACE/B,EAASF,EAAKwB,EAAGxB,EAAKyB,GACxBtB,IAGAE,KAwDJ,OACE,yBAAK6B,UAAU,OAAOvB,MAAOA,EAC3BwB,QAAS,SAACL,GApEZ7B,EAAYD,IAqEVoC,cAAe,SAACN,GAAD,OAAOD,EAAcC,IACpCO,aAAc,SAACP,GAAD,OA9BW,SAACA,GACN,UAAlBA,EAAEQ,cAGNP,QAAQC,IAAI,wBACPzB,IACHG,GAAkB,GAClB6B,YAAW,WACT/B,GAAW,GACXuB,QAAQC,IAAI,SACX,OAoBkBQ,CAAqBV,IAC1CW,WAAY,SAACX,GAAD,OA5CW,SAACA,GACJ,UAAlBA,EAAEQ,cAGF/B,GAAWE,IACboB,EAAcC,GACdY,aAAanC,GACbG,GAAkB,GAClBF,GAAW,IAEbuB,QAAQC,IAAI,uBAkCSW,CAAmBb,IAEtCc,eAAgB,SAACd,GAAD,OAdlBC,QAAQC,IAAI,8BACRzB,IACFmC,aAAanC,GACbC,GAAW,OAhDK,SAACR,GACnB,OAAIA,EAAK6C,UAAY7C,EAAKgB,SACjB,yBAAK8B,IAAI,gCAAgCC,IAAI,OAAOC,GAAG,eAEvDhD,EAAKgB,UAA2B,IAAfhB,EAAKc,MACV,MAAfd,EAAKc,MACA,yBAAKgC,IAAI,wCAAwCC,IAAI,OAAOC,GAAG,eAEjEhD,EAAKc,MAEP,GAmDJmC,CAAYjD,IAKnB,IAAMa,EAAwB,SAACC,GAC7B,OAAQA,GACN,KAAK,EACH,MAAO,UACT,KAAK,EACH,MAAO,UACT,KAAK,EACH,MAAO,UACT,KAAK,EACH,MAAO,UACT,KAAK,EACH,MAAO,UACT,KAAK,EACH,MAAO,UACT,KAAK,EACH,MAAO,UACT,KAAK,EACH,MAAO,UACT,QAAS,MAAO,CAAEF,MAAO,aClJd,SAASsC,EAAT,GAAwC,IAAvBC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,SAAY,EAG1B9C,oBAAS,IAAI+C,MAAOC,sBAHM,mBAG3CC,EAH2C,KAGrCC,EAHqC,KAI5CC,EAAiBC,iBAAO,GAqB9B,OAnBAC,qBAAU,WACN,IAAMC,EAAUrB,YAAW,WACvB,IAAMsB,EAAO,IAAIR,KACjBI,EAAeK,QAAUL,EAAeK,QAAU,EAClDV,EAASK,EAAeK,SACxBN,EAAQK,EAAKP,wBACd,KAOH,OANIH,IACApB,QAAQC,IAAI,aACZU,aAAakB,GACbG,cAAcH,GACdH,EAAeK,QAAU,GAEtB,WACHpB,aAAakB,MAGlB,CAACL,EAAMJ,IAGN,6BACI,6CAAmBI,GAEnB,yBAAKP,GAAG,eAAc,0BAAMgB,KAAK,MAAMC,aAAW,SAA5B,UAAtB,kBAAkFR,EAAeK,UCzB7G,IAgVeI,EAhVD,WAAO,IAAD,EAEU5D,mBAAS,IAFnB,mBAET6D,EAFS,KAEFC,EAFE,OAGU9D,mBAAS,QAHnB,mBAGT+D,EAHS,KAGFC,EAHE,OAIyBhE,mBAAS,IAJlC,mBAITiE,EAJS,KAIKC,EAJL,OAKkBlE,mBAAS,GAL3B,mBAKTmE,EALS,KAKEC,EALF,OAMkBpE,mBAAS,GAN3B,mBAMTqE,EANS,KAMEC,EANF,OAOkBtE,mBAAS,GAP3B,mBAOTuE,EAPS,KAOEC,EAPF,OAQexE,mBAAS,GARxB,mBAQTyE,EARS,KAQIvB,EARJ,OASYlD,mBAAS,GATrB,mBAST6C,EATS,KASC6B,EATD,KAYhBrB,qBAAU,WACNsB,EAAUZ,GAAO,KAClB,IAEH,IAAMY,EAAY,SAACZ,EAAOa,GACtBF,GAAQ,GACRxB,GAAS,GAF4B,MAGAhE,EAAO6E,GAApC3E,EAH6B,EAG7BA,OAAQC,EAHqB,EAGrBA,OAAQC,EAHa,EAGbA,SAClBuE,EAQV,SAAsBzE,EAAQC,EAAQC,EAAUyE,EAAOa,GACnD,IAAIf,EAAQ,GACRI,EAAe,GAEnBJ,EAiDJ,SAA8BzE,EAAQC,EAAQwE,GAC1C,IAAK,IAAIgB,EAAI,EAAGA,EAAIzF,EAAQyF,IAAK,CAC7BhB,EAAMiB,KAAK,IACX,IAAK,IAAIC,EAAI,EAAGA,EAAI1F,EAAQ0F,IACxBlB,EAAMgB,GAAGC,KAAK,CACVtE,MAAO,EACPU,EAAG2D,EACH1D,EAAG4D,EACHrE,UAAU,EACV6B,SAAS,IAIrB,OAAOsB,EA9DCmB,CAAqB5F,EAAQC,EAAQwE,GAEzCe,IACAX,EAAegB,EAAa7F,EAAQC,EAAQC,EAAUuE,EAAOI,EAAcF,GAC3EF,EAAQqB,EAAqB9F,EAAQC,EAAQwE,IAGjD,MAAO,CAAEA,QAAOI,gBAnBFkB,CAAa/F,EAAQC,EAAQC,EAAUyE,EAAOa,GAC5Dd,EAASD,EAAMA,OACfK,EAAiBL,EAAMI,cACvBG,EAAa,GACbE,EAAa,GACbE,EAAalF,IAgCjB,SAASQ,IACLsE,GAAa,SAAAgB,GAAS,OAAIA,EAAY,KAO1C,SAASvF,IACLyE,GAAa,SAAAc,GAAS,OAAIA,EAAY,KADZ,IAGlB9F,EAAaJ,EAAO6E,GAApBzE,SAERkF,EAAalF,EAAW+E,EAAY,GAGxC,SAAStE,IACLuE,GAAa,SAAAc,GAAS,OAAIA,EAAY,KADZ,IAGlB9F,EAAaJ,EAAO6E,GAApBzE,SAERkF,EAAalF,EAAW+E,EAAY,GAmBxC,IAAMgB,EAAc,SAACnE,EAAGC,EAAGmE,EAAIC,GAC3B,IAAK,IAAIC,EAAKtE,EAAI,EAAGsE,GAAMtE,EAAI,EAAGsE,IAC9B,IAAK,IAAIC,EAAKtE,EAAI,EAAGsE,GAAMtE,EAAI,EAAGsE,IAC9B,IAAID,IAAOtE,GAAKuE,IAAOtE,IAGnBmE,IAAOE,GAAMD,IAAOE,EACpB,OAAO,EAInB,OAAO,GAGX,SAASR,EAAa7F,EAAQC,EAAQC,EAAUuE,EAAOI,EAAcF,EAAO7C,EAAGC,GAC3E,IAAIuE,GAAa,EACH,aAAV3B,IACA2B,GAAa,GAEjB,IAAK,IAAInB,EAAY,EAAGA,EAAYjF,GAAW,CAE3C,IAAIqG,EAAO9B,EAAM+B,EAAaxG,IAASwG,EAAavG,IACjC,IAAfsG,EAAKnF,OAAe6E,EAAYnE,EAAGC,EAAGwE,EAAKzE,EAAGyE,EAAKxE,IAAMD,IAAMyE,EAAKzE,GAAKC,IAAMwE,EAAKxE,IACpFwE,EAAKnF,MAAQ,IACbmF,EAAKjF,SAAWgF,EAChBzB,EAAaa,KAAK,CAACa,EAAKzE,EAAGyE,EAAKxE,IAChCoD,KAIR,OAAON,EAGX,SAASiB,EAAqB9F,EAAQC,EAAQwE,GAC1C,IAAK,IAAI3C,EAAI,EAAGA,EAAI9B,EAAQ8B,IACxB,IAAK,IAAIC,EAAI,EAAGA,EAAI9B,EAAQ8B,IACxB,GAA0B,MAAtB0C,EAAM3C,GAAGC,GAAGX,MAAhB,CAIA,IADA,IAAIqF,EAAoB,EACfL,EAAKtE,EAAI,EAAGsE,GAAMtE,EAAI,EAAGsE,IAC9B,IAAK,IAAIC,EAAKtE,EAAI,EAAGsE,GAAMtE,EAAI,EAAGsE,IACzBD,EAAK,GAAKA,GAAMpG,GAChBqG,EAAK,GAAKA,GAAMpG,GAChBmG,IAAOtE,GAAKuE,IAAOtE,GAGI,MAAxB0C,EAAM2B,GAAIC,GAAIjF,OACdqF,IAIZhC,EAAM3C,GAAGC,GAAGX,MAAQqF,EAG5B,OAAOhC,EAGX,SAAS+B,EAAaE,GAClB,OAAOlF,KAAKmF,MAAMnF,KAAKG,SAAWH,KAAKmF,MAAMD,IAGjD,IA8BME,EAAqB,SAACC,GACxB,IAAIC,EAAmB,sBACnBD,IACAC,EAAmB,kBAEvBC,SAASC,eAAe,WAAW/F,MAAMgG,WAAa,UACtDF,SAASC,eAAe,oBAAoBE,UAAYJ,EACxDC,SAASC,eAAe,aAAaE,UAAYnC,EAAY,EAE7DO,GAAQ,IAGZ,SAAS/E,EAAYD,EAAM8B,GAEvB,IAAI9B,EAAKgB,WAAYhB,EAAK6C,QAA1B,CAGK7C,EAAKgB,UACNZ,IAGJ,IAAIyG,EAAa,YAAO1C,GAGxB,GAtD0B,SAACA,EAAO3C,EAAGC,GACrC,GAAkB,IAAdgD,EAAiB,CAAC,IAAD,EACoBjF,EAAO6E,GAApC3E,EADS,EACTA,OAAQC,EADC,EACDA,OAAQC,EADP,EACOA,SACpB2E,EAAe,GACfuC,EAAS,YAAO3C,GAOpB,OANAI,EAAegB,EAAa7F,EAAQC,EAAQC,EAAUkH,EAAWvC,EAAcF,EAAO7C,EAAGC,GACzFqF,EAAYtB,EAAqB9F,EAAQC,EAAQmH,GACjD1C,EAAS0C,GACTtC,EAAiBD,GACjBG,EAAa,GACbM,GAAQ,IACD,GA0CX+B,CAAsBF,EAAe7G,EAAKwB,EAAGxB,EAAKyB,GACN,MAAxCoF,EAAc7G,EAAKwB,GAAGxB,EAAKyB,GAAGX,OAtCf,SAAC+F,GACpB,IAAK,IAAI1B,EAAI,EAAGA,EAAIZ,EAAayC,OAAQ7B,IAChC0B,EAActC,EAAaY,GAAG,IAAIZ,EAAaY,GAAG,IAAInE,WACvD6F,EAActC,EAAaY,GAAG,IAAIZ,EAAaY,GAAG,IAAInE,UAAW,EACjEoD,EAASyC,IAmCbI,CAAeJ,GACfP,GAAmB,OAChB,CAEH,KADAO,EAAgBK,EAAWL,EAAe7G,EAAKwB,EAAGxB,EAAKyB,IAEnD,QAnCS,WAAO,IAAD,EACcjC,EAAO6E,GAApC3E,EADe,EACfA,OAAQC,EADO,EACPA,OAAQC,EADD,EACCA,SACxB,OAAOuH,EAAoBzH,EAAQC,KAAYD,EAASC,EAASC,GAmCzDwH,IACAd,GAAmB,KAK/B,IAAMa,EAAsB,SAACzH,EAAQC,GAEjC,IADA,IAAI0H,EAAe,EACVlC,EAAI,EAAGA,EAAIzF,EAAQyF,IACxB,IAAK,IAAIE,EAAI,EAAGA,EAAI1F,EAAQ0F,IACE,MAAtBlB,EAAMgB,GAAGE,GAAGvE,QAA0C,IAAzBqD,EAAMgB,GAAGE,GAAGrE,UACzCqG,IAIZ,OAAOA,GAGLnH,EAAW,SAACsB,EAAGC,GACjB,IAAIoF,EAAa,YAAO1C,GAGxB,OAFA0C,EAAcrF,GAAGC,GAAGoB,SAAWgE,EAAcrF,GAAGC,GAAGoB,QACnDuB,EAASyC,GACFA,EAAcrF,GAAGC,GAAGoB,SAGzBqE,EAAa,SAAC/C,EAAO3C,EAAGC,GAC1B,IAAIX,EAAQqD,EAAM3C,GAAGC,GAAGX,MAWxB,OAVc,IAAVA,IAC6B,IAAzBqD,EAAM3C,GAAGC,GAAGT,WACZmD,EAAM3C,GAAGC,GAAGT,UAAW,GAE3BsG,EAAmBnD,EAAO3C,EAAGC,IAExBX,GAAS,IACdqD,EAAM3C,GAAGC,GAAGT,UAAW,GAGpBmD,GAGLoD,EAAmB,SAAC/F,EAAGC,GAAO,IAAD,EACJjC,EAAO6E,GAA1B3E,EADuB,EACvBA,OAAQC,EADe,EACfA,OAEhB,OADiB6B,GAAK,GAAKA,EAAI9B,GAAU+B,GAAK,GAAKA,EAAI9B,GAIrD2H,EAAqB,SAACnD,EAAO3C,EAAGC,GAClC,IAAK,IAAIqE,EAAKtE,EAAI,EAAGsE,GAAMtE,EAAI,EAAGsE,IAC9B,IAAK,IAAIC,EAAKtE,EAAI,EAAGsE,GAAMtE,EAAI,EAAGsE,IAC1BwB,EAAiBzB,EAAIC,KAAQ5B,EAAM2B,GAAIC,GAAI/E,WAC3CmD,EAAQ+C,EAAW/C,EAAO2B,EAAIC,IAK1C,OAAO5B,GAQX,OACI,yBAAKjC,UAAU,QACX,yBAAKA,UAAU,cACX,yBAAKA,UAAU,SACX,kBAACgB,EAAD,CAAOC,SAAUA,EAAUC,SAnO3C,SAAwBG,GACpBC,EAAQD,OAoOA,yBAAKrB,UAAU,cACX,8BAAM,0BAAM8B,KAAK,MAAMC,aAAW,QAA5B,gBAAN,cAA8DY,EAA9D,MAEJ,yBAAK3C,UAAU,cACX,4CAAkBuC,EAAlB,MAEJ,yBAAKvC,UAAU,SACX,uCAAamC,EAAb,KACA,4BAAQmD,KAAK,QAAQrF,QAhQrC,WACImC,EAAS,YACTW,EAAU,cA8PE,YACA,4BAAQuC,KAAK,QAAQrF,QA5PrC,WACImC,EAAS,QACTW,EAAU,SA0P2CwC,gBAAc,GAAvD,QACA,4BAAQD,KAAK,QAAQrF,QAxPrC,WACImC,EAAS,cACTW,EAAU,gBAsPE,gBAGR,yBAAK/C,UAAU,SACViC,EAAMuD,KAAI,SAACC,EAAKC,GACb,OACI,yBAAK1F,UAAU,gCAAgC0F,IAAKA,GAC/CD,EAAID,KAAI,SAAC1H,EAAM4H,GACZ,OACI,kBAAC7H,EAAD,CACI6H,IAAKA,EACL5H,KAAMA,EACNC,YAAaA,EACbC,SAAUA,EACVE,mBAAoBA,EACpBD,mBAAoBA,EACpBE,mBAAoBA,YAQhD,yBAAK2C,GAAG,UAAUb,QA7CV,WACZ8C,EAAUZ,GACVoC,SAASC,eAAe,WAAW/F,MAAMgG,WAAa,WA4C9C,yBAAK3D,GAAG,aACJ,uBAAGA,GAAG,mBAAmBd,UAAU,YAAnC,+BACA,uBAAGA,UAAU,UAAb,eAAkC,0BAAMc,GAAG,aAAT,KAAlC,WACA,uBAAGd,UAAU,UAAb,eAAkC,0BAAMc,GAAG,gBAAgB+B,EAAc,EAAvC,KAAlC,aACA,uBAAG7C,UAAU,UAAb,iDC5TL2F,MAdf,WACE,IAAIC,EAAOrB,SAASsB,cAAc,QAGlC,OAFAhG,QAAQC,IAAI,oBAAqB8F,EAAKE,YAAa,IAAKF,EAAKG,cAG3D,yBAAK/F,UAAU,oBACb,yBAAKA,UAAU,aACb,+CACA,kBAAC,EAAD,SCRRgG,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF3B,SAASC,eAAe,U","file":"static/js/main.44f0b06c.chunk.js","sourcesContent":["const config = {\r\n    too_easy: {\r\n        grid_w: 4,\r\n        grid_l: 4,\r\n        mine_num: 2\r\n    },\r\n    easy: {\r\n        grid_w: 10,\r\n        grid_l: 8,\r\n        mine_num: 10\r\n    },\r\n    kinda_easy: {\r\n        grid_w: 18,\r\n        grid_l: 14,\r\n        mine_num: 40\r\n    }\r\n}\r\n\r\nexport default config","import React, { useState } from \"react\";\r\n\r\nexport default function Card({ data, updateBoard, flagCard, incrementMoveCount, incrementFlagCount, decrementFlagCount }) {\r\n  const [timerID, settimerID] = useState(false);\r\n  const [isLongPressing, setIsLongPressing] = useState(false);\r\n\r\n\r\n  // I stole random_rgba function from https://stackoverflow.com/questions/23095637/how-do-you-get-random-rgb-in-javascript\r\n  function random_rgba() {\r\n    var o = Math.round, r = Math.random, s = 255;\r\n    return 'rgba(' + o(r() * s) + ',' + o(r() * s) + ',' + o(r() * s) + ',' + r().toFixed(1) + ')';\r\n  }\r\n\r\n  const unreavledBackgroundColor = (data) => {\r\n    if ((data.x + data.y) % 2 === 0) {\r\n      return '#6dba54';\r\n    }\r\n    else {\r\n      return '#4f8a3d';\r\n    }\r\n  }\r\n\r\n  const reavledBackgroundColor = (data) => {\r\n    if ((data.x + data.y) % 2 === 0) {\r\n      return '#fad3ac';\r\n    }\r\n    else {\r\n      return '#c29970';\r\n    }\r\n  }\r\n\r\n  const cardBackgroundColor = (data) => {\r\n    if (data.revealed && data.value === \"M\") {\r\n      return random_rgba();\r\n    }\r\n    if (data.revealed && data.value !== \"M\") {\r\n      return reavledBackgroundColor(data);\r\n    }\r\n    if (!data.revealed) {\r\n      return unreavledBackgroundColor(data);\r\n    }\r\n  }\r\n\r\n  const style = {\r\n    color: colourful_Number_Card(data.value),\r\n    background: cardBackgroundColor(data)\r\n  }\r\n\r\n  const leftClicking = (e) => {\r\n    updateBoard(data);\r\n  };\r\n\r\n  const rightClicking = (e) => {\r\n    console.log('rightClicking')\r\n    e.preventDefault();\r\n    if (flagCard(data.x, data.y)) {\r\n      incrementFlagCount();\r\n    }\r\n    else {\r\n      decrementFlagCount();\r\n    }\r\n  };\r\n\r\n  const cardContent = (data) => {\r\n    if (data.flagged && !data.revealed) {\r\n      return <img src=\"/Not-Minesweeper/redflag2.png\" alt=\"flag\" id=\"card_image\"></img>\r\n    }\r\n    else if (data.revealed && data.value !== 0) {\r\n      if (data.value === \"M\") {\r\n        return <img src=\"/Not-Minesweeper/minesweeper-icon.png\" alt=\"mine\" id=\"card_image\"></img>\r\n      }\r\n      return data.value\r\n    }\r\n    return '';\r\n  }\r\n\r\n  const longPressPointerUp = (e) => {\r\n    if (e.pointerType === 'mouse') {\r\n      return\r\n    }\r\n    if (timerID && isLongPressing) {\r\n      rightClicking(e);\r\n      clearTimeout(timerID);\r\n      setIsLongPressing(false);\r\n      settimerID(false);\r\n    }\r\n    console.log('longPressPointerUp');\r\n  }\r\n\r\n  const longPressPointerDown = (e) => {\r\n    if (e.pointerType === 'mouse') {\r\n      return\r\n    }\r\n    console.log('longPressPointerDown');\r\n    if (!timerID) {\r\n      setIsLongPressing(true);\r\n      setTimeout(() => {\r\n        settimerID(true);\r\n        console.log('lol');\r\n      }, 1000)\r\n    }\r\n  }\r\n\r\n  const longPressPointerMove = (e) => {\r\n    console.log('longPressPointerMove');\r\n  }\r\n\r\n  const longPressPointerLeave = (e) => {\r\n    console.log('longPressPointerLeave');\r\n    if (timerID) {\r\n      clearTimeout(timerID);\r\n      settimerID(false);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"Card\" style={style}\r\n      onClick={(e) => leftClicking(e)}\r\n      onContextMenu={(e) => rightClicking(e)}\r\n      onTouchStart={(e) => longPressPointerDown(e)}\r\n      onTouchEnd={(e) => longPressPointerUp(e)}\r\n      // onPointerMove={(e) => longPressPointerMove(e)}\r\n      onPointerLeave={(e) => longPressPointerLeave(e)}\r\n    >\r\n      {cardContent(data)}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst colourful_Number_Card = (value) => {\r\n  switch (value) {\r\n    case 1:\r\n      return \"#0345fc\";\r\n    case 2:\r\n      return \"#03fc2c\";\r\n    case 3:\r\n      return \"#fc0303\";\r\n    case 4:\r\n      return \"#8403fc\";\r\n    case 5:\r\n      return \"#5afc03\";\r\n    case 6:\r\n      return \"#fc03a1\";\r\n    case 7:\r\n      return \"#fc8c03\";\r\n    case 8:\r\n      return \"#03fc8c\";\r\n    default: return { color: \"#03adfc\" };\r\n  }\r\n};\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nexport default function Timer({ gameOver, sendTime }) {\r\n    // I took this code from https://medium.com/@dhilipkmr/reacthooks-3f289f2377ab\r\n    // From line 6 to line 15\r\n    const [time, setTime] = useState(new Date().toLocaleTimeString());\r\n    const seconds_Passed = useRef(0);\r\n\r\n    useEffect(() => {\r\n        const timeout = setTimeout(() => {\r\n            const date = new Date()\r\n            seconds_Passed.current = seconds_Passed.current + 1;\r\n            sendTime(seconds_Passed.current);\r\n            setTime(date.toLocaleTimeString());\r\n        }, 1000);\r\n        if (gameOver) {\r\n            console.log('game over')\r\n            clearTimeout(timeout);\r\n            clearInterval(timeout);\r\n            seconds_Passed.current = 0;\r\n        }\r\n        return () => {\r\n            clearTimeout(timeout);\r\n        }\r\n\r\n    }, [time, gameOver]);\r\n\r\n    return (\r\n        <div>\r\n            <div>Current Time:{time}</div>\r\n\r\n            <div id=\"elapsedTime\"><span role=\"img\" aria-label=\"Timer\">⌛</span> Elapsed Time: {seconds_Passed.current}</div>\r\n        </div>\r\n\r\n    );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport config from \"../config\";\r\nimport Card from \"./Card\";\r\nimport Timer from \"./Timer\"\r\n\r\nconst Board = () => {\r\n\r\n    const [board, setBoard] = useState([]);\r\n    const [level, setLevel] = useState('easy');\r\n    const [mineLocation, setMineLocations] = useState([]);\r\n    const [moveCount, setMoveCount] = useState(0);\r\n    const [flagCount, setFlagCount] = useState(0);\r\n    const [mineCount, setMineCount] = useState(0);\r\n    const [elapsedTime, setTime] = useState(0);\r\n    const [gameOver, setGame] = useState(0);\r\n\r\n\r\n    useEffect(() => {\r\n        new_Board(level, false);\r\n    }, []);\r\n\r\n    const new_Board = (level, first_move) => {\r\n        setGame(true);\r\n        setTime(-1);\r\n        const { grid_w, grid_l, mine_num } = config[level];\r\n        const board = create_Board(grid_w, grid_l, mine_num, level, first_move);\r\n        setBoard(board.board);\r\n        setMineLocations(board.mineLocation);\r\n        setMoveCount(0);\r\n        setFlagCount(0);\r\n        setMineCount(mine_num);\r\n    }\r\n\r\n    function create_Board(grid_w, grid_l, mine_num, level, first_move) {\r\n        let board = [];\r\n        let mineLocation = [];\r\n\r\n        board = populate_Empty_Board(grid_w, grid_l, board);\r\n\r\n        if (first_move) {\r\n            mineLocation = inject_Mines(grid_w, grid_l, mine_num, board, mineLocation, level);\r\n            board = calculate_Card_Value(grid_w, grid_l, board);\r\n        }\r\n\r\n        return { board, mineLocation };\r\n    }\r\n\r\n    function too_easy_mode() {\r\n        setLevel('too_easy');\r\n        new_Board('too_easy');\r\n    }\r\n\r\n    function easy_mode() {\r\n        setLevel('easy');\r\n        new_Board('easy');\r\n    }\r\n\r\n    function kinda_easy_mode() {\r\n        setLevel('kinda_easy');\r\n        new_Board('kinda_easy');\r\n    }\r\n\r\n    function incrementMoveCount() {\r\n        setMoveCount(prevCount => prevCount + 1);\r\n    }\r\n\r\n    function setElapsedTime(time) {\r\n        setTime(time);\r\n    }\r\n\r\n    function incrementFlagCount() {\r\n        setFlagCount(prevCount => prevCount + 1);\r\n        // console.log('flagCount increase to:', flagCount+1);\r\n        const { mine_num } = config[level];\r\n        // console.log('MineCount decrease to:',mine_num-flagCount-1);\r\n        setMineCount(mine_num - flagCount - 1)\r\n    }\r\n\r\n    function decrementFlagCount() {\r\n        setFlagCount(prevCount => prevCount - 1);\r\n        // console.log('flagCount decrease to:', flagCount-1);\r\n        const { mine_num } = config[level];\r\n        // console.log('MineCount increase to:',mine_num-flagCount+1);\r\n        setMineCount(mine_num - flagCount + 1)\r\n    }\r\n\r\n    function populate_Empty_Board(grid_w, grid_l, board) {\r\n        for (let i = 0; i < grid_w; i++) {\r\n            board.push([]);\r\n            for (let j = 0; j < grid_l; j++) {\r\n                board[i].push({\r\n                    value: 0,\r\n                    x: i,\r\n                    y: j,\r\n                    revealed: false,\r\n                    flagged: false\r\n                });\r\n            }\r\n        }\r\n        return board;\r\n    }\r\n\r\n    const notadjacent = (x, y, tx, ty) => {\r\n        for (let xi = x - 1; xi <= x + 1; xi++) {\r\n            for (let yi = y - 1; yi <= y + 1; yi++) {\r\n                if (xi === x && yi === y) {\r\n                    continue\r\n                }\r\n                if (tx === xi && ty === yi) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function inject_Mines(grid_w, grid_l, mine_num, board, mineLocation, level, x, y) {\r\n        let minereveal = false;\r\n        if (level === 'too_easy') {\r\n            minereveal = false;\r\n        }\r\n        for (let mineCount = 0; mineCount < mine_num;) {\r\n            // let mine = board[getRandomInt(grid_w - 1)][getRandomInt(grid_l - 1)];\r\n            let mine = board[getRandomInt(grid_w)][getRandomInt(grid_l)];\r\n            if (mine.value === 0 && notadjacent(x, y, mine.x, mine.y) && x !== mine.x && y !== mine.y) {\r\n                mine.value = \"M\";\r\n                mine.revealed = minereveal;\r\n                mineLocation.push([mine.x, mine.y]);\r\n                mineCount++;\r\n            }\r\n        }\r\n\r\n        return mineLocation;\r\n    }\r\n\r\n    function calculate_Card_Value(grid_w, grid_l, board) {\r\n        for (let x = 0; x < grid_w; x++) {\r\n            for (let y = 0; y < grid_l; y++) {\r\n                if (board[x][y].value === \"M\") {\r\n                    continue;\r\n                }\r\n                let surround_mine_num = 0;\r\n                for (let xi = x - 1; xi <= x + 1; xi++) {\r\n                    for (let yi = y - 1; yi <= y + 1; yi++) {\r\n                        if ((xi < 0 || xi >= grid_w) ||\r\n                            (yi < 0 || yi >= grid_l) ||\r\n                            (xi === x && yi === y)) {\r\n                            continue\r\n                        }\r\n                        if (board[xi][yi].value === \"M\") {\r\n                            surround_mine_num++;\r\n                        }\r\n                    }\r\n                }\r\n                board[x][y].value = surround_mine_num;\r\n            }\r\n        }\r\n        return board;\r\n    }\r\n\r\n    function getRandomInt(max) {\r\n        return Math.floor(Math.random() * Math.floor(max));\r\n    }\r\n\r\n    const first_move_Portection = (board, x, y) => {\r\n        if (moveCount === 0) {\r\n            const { grid_w, grid_l, mine_num } = config[level];\r\n            let mineLocation = [];\r\n            let new_board = [...board];\r\n            mineLocation = inject_Mines(grid_w, grid_l, mine_num, new_board, mineLocation, level, x, y);\r\n            new_board = calculate_Card_Value(grid_w, grid_l, new_board);\r\n            setBoard(new_board);\r\n            setMineLocations(mineLocation);\r\n            setMoveCount(1);\r\n            setGame(false);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    const revealAllMines = (updated_board) => {\r\n        for (let i = 0; i < mineLocation.length; i++) {\r\n            if (!updated_board[mineLocation[i][0]][mineLocation[i][1]].revealed) {\r\n                updated_board[mineLocation[i][0]][mineLocation[i][1]].revealed = true;\r\n                setBoard(updated_board);\r\n            }\r\n        }\r\n    }\r\n\r\n    const checkWinGame = () => {\r\n        const { grid_w, grid_l, mine_num } = config[level];\r\n        return checkNonMinesAmount(grid_w, grid_l) === grid_w * grid_l - mine_num;\r\n    }\r\n\r\n    const sendEndGameMessage = (win) => {\r\n        let end_game_message = 'You suck! You lose!';\r\n        if (win) {\r\n            end_game_message = 'Damn, You Win!';\r\n        }\r\n        document.getElementById('overlay').style.visibility = \"visible\";\r\n        document.getElementById('end game message').innerHTML = end_game_message;\r\n        document.getElementById('moveCount').innerHTML = moveCount + 1;\r\n        // document.getElementById('elapsedTime').innerHTML = moveCount + 1;\r\n        setGame(true);\r\n    }\r\n\r\n    function updateBoard(data, e) {\r\n        // console.log(data);\r\n        if (data.revealed || data.flagged) {\r\n            return;\r\n        }\r\n        if (!data.revealed) {\r\n            incrementMoveCount();\r\n        }\r\n\r\n        let updated_board = [...board];\r\n        // Make first move always valid\r\n        first_move_Portection(updated_board, data.x, data.y)\r\n        if (updated_board[data.x][data.y].value === \"M\") {\r\n            revealAllMines(updated_board);\r\n            sendEndGameMessage(false);\r\n        } else {\r\n            updated_board = revealCard(updated_board, data.x, data.y);\r\n            if (!updated_board) {\r\n                return;\r\n            }\r\n            if (checkWinGame()) {\r\n                sendEndGameMessage(true);\r\n            }\r\n        }\r\n    };\r\n\r\n    const checkNonMinesAmount = (grid_w, grid_l) => {\r\n        let non_mine_num = 0;\r\n        for (let i = 0; i < grid_w; i++) {\r\n            for (let j = 0; j < grid_l; j++) {\r\n                if (board[i][j].value !== \"M\" && board[i][j].revealed === true) {\r\n                    non_mine_num++;\r\n                }\r\n            }\r\n        }\r\n        return non_mine_num;\r\n    }\r\n\r\n    const flagCard = (x, y) => {\r\n        let updated_board = [...board];\r\n        updated_board[x][y].flagged = !updated_board[x][y].flagged;\r\n        setBoard(updated_board);\r\n        return updated_board[x][y].flagged;\r\n    };\r\n\r\n    const revealCard = (board, x, y) => {\r\n        let value = board[x][y].value;\r\n        if (value === 0) {\r\n            if (board[x][y].revealed === false) {\r\n                board[x][y].revealed = true;\r\n            }\r\n            revealAdjacentCard(board, x, y);\r\n        }\r\n        else if (value >= 1) {\r\n            board[x][y].revealed = true;\r\n        }\r\n\r\n        return board;\r\n    }\r\n\r\n    const indexBoundsCheck = (x, y) => {\r\n        const { grid_w, grid_l } = config[level];\r\n        let isInBound = (x >= 0 && x < grid_w && y >= 0 && y < grid_l);\r\n        return isInBound;\r\n    }\r\n\r\n    const revealAdjacentCard = (board, x, y) => {\r\n        for (let xi = x - 1; xi <= x + 1; xi++) {\r\n            for (let yi = y - 1; yi <= y + 1; yi++) {\r\n                if (indexBoundsCheck(xi, yi) && !board[xi][yi].revealed) {\r\n                    board = revealCard(board, xi, yi);\r\n                }\r\n            }\r\n        }\r\n\r\n        return board;\r\n    }\r\n\r\n    const restart = () => {\r\n        new_Board(level);\r\n        document.getElementById('overlay').style.visibility = \"hidden\";\r\n    }\r\n\r\n    return (\r\n        <div className=\"game\">\r\n            <div className=\"status-bar\">\r\n                <div className=\"Timer\">\r\n                    <Timer gameOver={gameOver} sendTime={setElapsedTime} />\r\n                </div>\r\n                <div className=\"Mine Count\">\r\n                    <span><span role=\"img\" aria-label=\"Flag\">🚩</span>Mine Count:{mineCount} </span>\r\n                </div>\r\n                <div className=\"Move Count\">\r\n                    <span>Move Count:{moveCount} </span>\r\n                </div>\r\n                <div className=\"level\">\r\n                    <span>Level:{level} </span>\r\n                    <button type=\"radio\" onClick={too_easy_mode} >Too_Easy</button>\r\n                    <button type=\"radio\" onClick={easy_mode} defaultChecked >Easy</button>\r\n                    <button type=\"radio\" onClick={kinda_easy_mode}>Kinda_Easy</button>\r\n                </div>\r\n            </div>\r\n            <div className='Board'>\r\n                {board.map((row, key) => {\r\n                    return (\r\n                        <div className=\"d-flex justify-content-center\" key={key}>\r\n                            {row.map((data, key) => {\r\n                                return (\r\n                                    <Card\r\n                                        key={key}\r\n                                        data={data}\r\n                                        updateBoard={updateBoard}\r\n                                        flagCard={flagCard}\r\n                                        incrementMoveCount={incrementMoveCount}\r\n                                        incrementFlagCount={incrementFlagCount}\r\n                                        decrementFlagCount={decrementFlagCount}\r\n                                    />\r\n                                );\r\n                            })}\r\n                        </div>\r\n                    );\r\n                })}\r\n            </div>\r\n            <div id=\"overlay\" onClick={restart}>\r\n                <div id=\"overlayin\">\r\n                    <p id=\"end game message\" className=\"big glow\">Congratulations, you won!!!</p>\r\n                    <p className=\"darker\">It took you <span id=\"moveCount\">0</span> moves.</p>\r\n                    <p className=\"darker\">It took you <span id=\"elapsed time\">{elapsedTime + 1} </span> Seconds.</p>\r\n                    <p className=\"darker\">Click/Press anywhere to restart the game.</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Board;","import React from 'react';\nimport './App.css';\nimport Board from \"./componenets/Board\";\n\nfunction App() {\n  let html = document.querySelector(\"html\");\n  console.log(\"Your render area:\", html.clientWidth, \"x\", html.clientHeight)\n\n  return (\n    <div className=\"App unselectable\">\n      <div className=\"container\">\n        <h1>Not MineSweeper</h1>\n        <Board />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}