{"version":3,"sources":["config.js","componenets/Card.js","componenets/Timer.js","componenets/Board.js","App.js","index.js"],"names":["config","too_easy","grid_w","grid_l","mine_num","easy","kinda_easy","Card","data","updateBoard","flagCard","incrementFlagCount","incrementMoveCount","decrementFlagCount","useState","timerID","settimerID","isLongPressing","setIsLongPressing","downTarget","setDownTarget","setMoveTarget","movedFlag","setMovedFlag","style","color","colourful_Number_Card","value","background","revealed","o","Math","round","r","random","toFixed","random_rgba","x","y","reavledBackgroundColor","unreavledBackgroundColor","cardBackgroundColor","rightClicking","e","myOnTouchMove","point1","point2","targetTouches","clientX","clientY","sqrt","pow","className","onClick","onContextMenu","preventDefault","isMobile","PConContextMenu","onTouchStart","setTimeout","longPressPointerDown","onTouchEnd","console","log","clearTimeout","onTouchCancel","onTouchMove","flagged","src","alt","id","cardContent","Timer","gameOver","sendTime","Date","toLocaleTimeString","time","setTime","seconds_Passed","useRef","useEffect","timeout","date","current","clearInterval","role","aria-label","Board","board","setBoard","level","setLevel","mineLocation","setMineLocations","moveCount","setMoveCount","flagCount","setFlagCount","mineCount","setMineCount","elapsedTime","setGame","new_Board","first_move","i","push","j","populate_Empty_Board","inject_Mines","calculate_Card_Value","create_Board","prevCount","notadjacent","tx","ty","xi","yi","minereveal","mine","getRandomInt","surround_mine_num","max","floor","sendEndGameMessage","win","end_game_message","document","getElementById","visibility","innerHTML","updated_board","new_board","first_move_Portection","length","revealAllMines","revealCard","checkNonMinesAmount","checkWinGame","non_mine_num","revealAdjacentCard","indexBoundsCheck","type","defaultChecked","map","row","key","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.6a85bc83.chunk.js","sourcesContent":["const config = {\r\n    too_easy: {\r\n        grid_w: 4,\r\n        grid_l: 4,\r\n        mine_num: 2\r\n    },\r\n    easy: {\r\n        grid_w: 10,\r\n        grid_l: 8,\r\n        mine_num: 10\r\n    },\r\n    kinda_easy: {\r\n        grid_w: 18,\r\n        grid_l: 14,\r\n        mine_num: 40\r\n    }\r\n}\r\n\r\nexport default config","import React, { useState } from \"react\";\r\nimport { isMobile } from 'react-device-detect';\r\n\r\nexport default function Card({ data, updateBoard, flagCard, incrementMoveCount, incrementFlagCount, decrementFlagCount }) {\r\n  const [timerID, settimerID] = useState(false);\r\n  const [isLongPressing, setIsLongPressing] = useState(false);\r\n  const [downTarget, setDownTarget] = useState([]);\r\n  const [moveTarget, setMoveTarget] = useState([]);\r\n  const [movedFlag, setMovedFlag] = useState(false);\r\n\r\n\r\n  // I stole random_rgba function from https://stackoverflow.com/questions/23095637/how-do-you-get-random-rgb-in-javascript\r\n  function random_rgba() {\r\n    var o = Math.round, r = Math.random, s = 255;\r\n    return 'rgba(' + o(r() * s) + ',' + o(r() * s) + ',' + o(r() * s) + ',' + r().toFixed(1) + ')';\r\n  }\r\n\r\n  const unreavledBackgroundColor = (data) => {\r\n    if ((data.x + data.y) % 2 === 0) {\r\n      return '#6dba54';\r\n    }\r\n    else {\r\n      return '#4f8a3d';\r\n    }\r\n  }\r\n\r\n  const reavledBackgroundColor = (data) => {\r\n    if ((data.x + data.y) % 2 === 0) {\r\n      return '#fad3ac';\r\n    }\r\n    else {\r\n      return '#c29970';\r\n    }\r\n  }\r\n\r\n  const cardBackgroundColor = (data) => {\r\n    if (data.revealed && data.value === \"M\") {\r\n      return random_rgba();\r\n    }\r\n    if (data.revealed && data.value !== \"M\") {\r\n      return reavledBackgroundColor(data);\r\n    }\r\n    if (!data.revealed) {\r\n      return unreavledBackgroundColor(data);\r\n    }\r\n  }\r\n\r\n  const style = {\r\n    color: colourful_Number_Card(data.value),\r\n    background: cardBackgroundColor(data)\r\n  }\r\n\r\n  const leftClicking = (e) => {\r\n    updateBoard(data);\r\n  };\r\n\r\n  const rightClicking = (e) => {\r\n    // console.log('rightClicking')\r\n    // e.preventDefault();\r\n    if (flagCard(data.x, data.y)) {\r\n      incrementFlagCount();\r\n    }\r\n    else {\r\n      decrementFlagCount();\r\n    }\r\n  };\r\n\r\n  const cardContent = (data) => {\r\n    if (data.flagged && !data.revealed) {\r\n      return <img src=\"/Not-Minesweeper/redflag2.png\" className=\"unselectable\" alt=\"flag\" id=\"card_image\"></img>\r\n    }\r\n    else if (data.revealed && data.value !== 0) {\r\n      if (data.value === \"M\") {\r\n        return <img src=\"/Not-Minesweeper/minesweeper-icon.png\" className=\"unselectable\" alt=\"mine\" id=\"card_image\"></img>\r\n      }\r\n      return data.value\r\n    }\r\n    return '';\r\n  }\r\n\r\n  const inMoveRange = (point1, point2) => {\r\n    if (typeof point1 === 'undefined' || typeof point2 === 'undefined') {\r\n      // console.log('inMoveRange argument is undefined')\r\n      return;\r\n    }\r\n    // console.log('inmoverange', point1, point2)\r\n    let distance = Math.sqrt(Math.pow(point1[0] - point2[0], 2) + Math.pow(point1[1] - point2[1], 2))\r\n    // console.log('inmoverange', distance);\r\n    if (distance > 15) {\r\n      setMovedFlag(true);\r\n    }\r\n  }\r\n\r\n  const longPressPointerUp = (e) => {\r\n    // e.preventDefault();\r\n    if (!isMobile) {\r\n      return\r\n    }\r\n    // console.log('longPressPointerUp timeID:', timerID, ' isLongPressing', isLongPressing, ' isMobile', isMobile);\r\n    console.log('You moved alway too far:',movedFlag);\r\n    // inMoveRange(downTarget, moveTarget)\r\n    if (timerID && isLongPressing && !movedFlag) {\r\n      rightClicking(e);\r\n      clearTimeout(timerID);\r\n      setIsLongPressing(false);\r\n      settimerID(false);\r\n    }\r\n    setMoveTarget([]);\r\n    setMovedFlag(false);\r\n  }\r\n\r\n  const longPressPointerDown = (e) => {\r\n    if (!isMobile) {\r\n      return\r\n    }\r\n    // console.log('longPressPointerDowntimeID: ', timerID, ' isLongPressing', isLongPressing, ' isMobile', isMobile);\r\n    setDownTarget([e.targetTouches[0].clientX, e.targetTouches[0].clientY]);\r\n    if (!timerID) {\r\n      setIsLongPressing(true);\r\n      setTimeout(() => {\r\n        settimerID(true);\r\n      }, 750)\r\n    }\r\n  }\r\n\r\n  const PConContextMenu = (e) => {\r\n    e.preventDefault();\r\n    if (isMobile) {\r\n      return\r\n    }\r\n    rightClicking(e);\r\n  }\r\n\r\n  const myOnTouchCancel = (e) => {\r\n    console.log('myOnTouchCancel:', timerID, ' isLongPressing', isLongPressing, ' isMobile', isMobile);\r\n  }\r\n\r\n  const myOnTouchMove = (e) => {\r\n    setMoveTarget([e.targetTouches[0].clientX, e.targetTouches[0].clientY]);\r\n    inMoveRange(downTarget, [e.targetTouches[0].clientX, e.targetTouches[0].clientY]);\r\n  }\r\n\r\n  const longPressPointerLeave = (e) => {\r\n    if (!isMobile) {\r\n      return\r\n    }\r\n    console.log('longPressPointerLeave');\r\n    if (timerID) {\r\n      clearTimeout(timerID);\r\n      settimerID(false);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"Card\" style={style}\r\n      onClick={(e) => leftClicking(e)}\r\n      onContextMenu={(e) => PConContextMenu(e)}\r\n      onTouchStart={(e) => longPressPointerDown(e)}\r\n      onTouchEnd={(e) => longPressPointerUp(e)}\r\n      onTouchCancel={(e) => myOnTouchCancel(e)}\r\n      onTouchMove={(e) => myOnTouchMove(e)}\r\n    // onPointerMove={(e) => longPressPointerMove(e)}\r\n    // onPointerLeave={(e) => longPressPointerLeave(e)}\r\n    >\r\n      {cardContent(data)}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst colourful_Number_Card = (value) => {\r\n  switch (value) {\r\n    case 1:\r\n      return \"#0345fc\";\r\n    case 2:\r\n      return \"#03fc2c\";\r\n    case 3:\r\n      return \"#fc0303\";\r\n    case 4:\r\n      return \"#8403fc\";\r\n    case 5:\r\n      return \"#5afc03\";\r\n    case 6:\r\n      return \"#fc03a1\";\r\n    case 7:\r\n      return \"#fc8c03\";\r\n    case 8:\r\n      return \"#03fc8c\";\r\n    default: return { color: \"#03adfc\" };\r\n  }\r\n};\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nexport default function Timer({ gameOver, sendTime }) {\r\n    // I took this code from https://medium.com/@dhilipkmr/reacthooks-3f289f2377ab\r\n    // From line 6 to line 15\r\n    const [time, setTime] = useState(new Date().toLocaleTimeString());\r\n    const seconds_Passed = useRef(0);\r\n\r\n    useEffect(() => {\r\n        const timeout = setTimeout(() => {\r\n            const date = new Date()\r\n            seconds_Passed.current = seconds_Passed.current + 1;\r\n            sendTime(seconds_Passed.current);\r\n            setTime(date.toLocaleTimeString());\r\n        }, 1000);\r\n        if (gameOver) {\r\n            // console.log('game over')\r\n            clearTimeout(timeout);\r\n            clearInterval(timeout);\r\n            seconds_Passed.current = 0;\r\n        }\r\n        return () => {\r\n            clearTimeout(timeout);\r\n        }\r\n\r\n    }, [time, gameOver]);\r\n\r\n    return (\r\n        <div>\r\n            <div>Current Time:{time}</div>\r\n\r\n            <div id=\"elapsedTime\"><span role=\"img\" aria-label=\"Timer\">⌛</span> Elapsed Time: {seconds_Passed.current}</div>\r\n        </div>\r\n\r\n    );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport config from \"../config\";\r\nimport Card from \"./Card\";\r\nimport Timer from \"./Timer\"\r\n\r\nconst Board = () => {\r\n\r\n    const [board, setBoard] = useState([]);\r\n    const [level, setLevel] = useState('easy');\r\n    const [mineLocation, setMineLocations] = useState([]);\r\n    const [moveCount, setMoveCount] = useState(0);\r\n    const [flagCount, setFlagCount] = useState(0);\r\n    const [mineCount, setMineCount] = useState(0);\r\n    const [elapsedTime, setTime] = useState(0);\r\n    const [gameOver, setGame] = useState(0);\r\n\r\n\r\n    useEffect(() => {\r\n        new_Board(level, false);\r\n    }, []);\r\n\r\n    const new_Board = (level, first_move) => {\r\n        setGame(true);\r\n        setTime(-1);\r\n        const { grid_w, grid_l, mine_num } = config[level];\r\n        const board = create_Board(grid_w, grid_l, mine_num, level, first_move);\r\n        setBoard(board.board);\r\n        setMineLocations(board.mineLocation);\r\n        setMoveCount(0);\r\n        setFlagCount(0);\r\n        setMineCount(mine_num);\r\n    }\r\n\r\n    function create_Board(grid_w, grid_l, mine_num, level, first_move) {\r\n        let board = [];\r\n        let mineLocation = [];\r\n\r\n        board = populate_Empty_Board(grid_w, grid_l, board);\r\n\r\n        if (first_move) {\r\n            mineLocation = inject_Mines(grid_w, grid_l, mine_num, board, mineLocation, level);\r\n            board = calculate_Card_Value(grid_w, grid_l, board);\r\n        }\r\n\r\n        return { board, mineLocation };\r\n    }\r\n\r\n    function too_easy_mode() {\r\n        setLevel('too_easy');\r\n        new_Board('too_easy');\r\n    }\r\n\r\n    function easy_mode() {\r\n        setLevel('easy');\r\n        new_Board('easy');\r\n    }\r\n\r\n    function kinda_easy_mode() {\r\n        setLevel('kinda_easy');\r\n        new_Board('kinda_easy');\r\n    }\r\n\r\n    function incrementMoveCount() {\r\n        setMoveCount(prevCount => prevCount + 1);\r\n    }\r\n\r\n    function setElapsedTime(time) {\r\n        setTime(time);\r\n    }\r\n\r\n    function incrementFlagCount() {\r\n        setFlagCount(prevCount => prevCount + 1);\r\n        // console.log('flagCount increase to:', flagCount+1);\r\n        const { mine_num } = config[level];\r\n        // console.log('MineCount decrease to:',mine_num-flagCount-1);\r\n        setMineCount(mine_num - flagCount - 1)\r\n    }\r\n\r\n    function decrementFlagCount() {\r\n        setFlagCount(prevCount => prevCount - 1);\r\n        // console.log('flagCount decrease to:', flagCount-1);\r\n        const { mine_num } = config[level];\r\n        // console.log('MineCount increase to:',mine_num-flagCount+1);\r\n        setMineCount(mine_num - flagCount + 1)\r\n    }\r\n\r\n    function populate_Empty_Board(grid_w, grid_l, board) {\r\n        for (let i = 0; i < grid_w; i++) {\r\n            board.push([]);\r\n            for (let j = 0; j < grid_l; j++) {\r\n                board[i].push({\r\n                    value: 0,\r\n                    x: i,\r\n                    y: j,\r\n                    revealed: false,\r\n                    flagged: false\r\n                });\r\n            }\r\n        }\r\n        return board;\r\n    }\r\n\r\n    const notadjacent = (x, y, tx, ty) => {\r\n        for (let xi = x - 1; xi <= x + 1; xi++) {\r\n            for (let yi = y - 1; yi <= y + 1; yi++) {\r\n                if (xi === x && yi === y) {\r\n                    continue\r\n                }\r\n                if (tx === xi && ty === yi) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function inject_Mines(grid_w, grid_l, mine_num, board, mineLocation, level, x, y) {\r\n        let minereveal = false;\r\n        if (level === 'too_easy') {\r\n            minereveal = false;\r\n        }\r\n        for (let mineCount = 0; mineCount < mine_num;) {\r\n            // let mine = board[getRandomInt(grid_w - 1)][getRandomInt(grid_l - 1)];\r\n            let mine = board[getRandomInt(grid_w)][getRandomInt(grid_l)];\r\n            if (mine.value === 0 && notadjacent(x, y, mine.x, mine.y) && x !== mine.x && y !== mine.y) {\r\n                mine.value = \"M\";\r\n                mine.revealed = minereveal;\r\n                mineLocation.push([mine.x, mine.y]);\r\n                mineCount++;\r\n            }\r\n        }\r\n\r\n        return mineLocation;\r\n    }\r\n\r\n    function calculate_Card_Value(grid_w, grid_l, board) {\r\n        for (let x = 0; x < grid_w; x++) {\r\n            for (let y = 0; y < grid_l; y++) {\r\n                if (board[x][y].value === \"M\") {\r\n                    continue;\r\n                }\r\n                let surround_mine_num = 0;\r\n                for (let xi = x - 1; xi <= x + 1; xi++) {\r\n                    for (let yi = y - 1; yi <= y + 1; yi++) {\r\n                        if ((xi < 0 || xi >= grid_w) ||\r\n                            (yi < 0 || yi >= grid_l) ||\r\n                            (xi === x && yi === y)) {\r\n                            continue\r\n                        }\r\n                        if (board[xi][yi].value === \"M\") {\r\n                            surround_mine_num++;\r\n                        }\r\n                    }\r\n                }\r\n                board[x][y].value = surround_mine_num;\r\n            }\r\n        }\r\n        return board;\r\n    }\r\n\r\n    function getRandomInt(max) {\r\n        return Math.floor(Math.random() * Math.floor(max));\r\n    }\r\n\r\n    const first_move_Portection = (board, x, y) => {\r\n        if (moveCount === 0) {\r\n            const { grid_w, grid_l, mine_num } = config[level];\r\n            let mineLocation = [];\r\n            let new_board = [...board];\r\n            mineLocation = inject_Mines(grid_w, grid_l, mine_num, new_board, mineLocation, level, x, y);\r\n            new_board = calculate_Card_Value(grid_w, grid_l, new_board);\r\n            setBoard(new_board);\r\n            setMineLocations(mineLocation);\r\n            setMoveCount(1);\r\n            setGame(false);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    const revealAllMines = (updated_board) => {\r\n        for (let i = 0; i < mineLocation.length; i++) {\r\n            if (!updated_board[mineLocation[i][0]][mineLocation[i][1]].revealed) {\r\n                updated_board[mineLocation[i][0]][mineLocation[i][1]].revealed = true;\r\n                setBoard(updated_board);\r\n            }\r\n        }\r\n    }\r\n\r\n    const checkWinGame = () => {\r\n        const { grid_w, grid_l, mine_num } = config[level];\r\n        return checkNonMinesAmount(grid_w, grid_l) === grid_w * grid_l - mine_num;\r\n    }\r\n\r\n    const sendEndGameMessage = (win) => {\r\n        let end_game_message = 'You suck! You lose!';\r\n        if (win) {\r\n            end_game_message = 'Damn, You Win!';\r\n        }\r\n        document.getElementById('overlay').style.visibility = \"visible\";\r\n        document.getElementById('end game message').innerHTML = end_game_message;\r\n        document.getElementById('moveCount').innerHTML = moveCount + 1;\r\n        // document.getElementById('elapsedTime').innerHTML = moveCount + 1;\r\n        setGame(true);\r\n    }\r\n\r\n    function updateBoard(data, e) {\r\n        // console.log(data);\r\n        if (data.revealed || data.flagged) {\r\n            return;\r\n        }\r\n        if (!data.revealed) {\r\n            incrementMoveCount();\r\n        }\r\n\r\n        let updated_board = [...board];\r\n        // Make first move always valid\r\n        first_move_Portection(updated_board, data.x, data.y)\r\n        if (updated_board[data.x][data.y].value === \"M\") {\r\n            revealAllMines(updated_board);\r\n            sendEndGameMessage(false);\r\n        } else {\r\n            updated_board = revealCard(updated_board, data.x, data.y);\r\n            if (!updated_board) {\r\n                return;\r\n            }\r\n            if (checkWinGame()) {\r\n                sendEndGameMessage(true);\r\n            }\r\n        }\r\n    };\r\n\r\n    const checkNonMinesAmount = (grid_w, grid_l) => {\r\n        let non_mine_num = 0;\r\n        for (let i = 0; i < grid_w; i++) {\r\n            for (let j = 0; j < grid_l; j++) {\r\n                if (board[i][j].value !== \"M\" && board[i][j].revealed === true) {\r\n                    non_mine_num++;\r\n                }\r\n            }\r\n        }\r\n        return non_mine_num;\r\n    }\r\n\r\n    const flagCard = (x, y) => {\r\n        let updated_board = [...board];\r\n        updated_board[x][y].flagged = !updated_board[x][y].flagged;\r\n        setBoard(updated_board);\r\n        return updated_board[x][y].flagged;\r\n    };\r\n\r\n    const revealCard = (board, x, y) => {\r\n        let value = board[x][y].value;\r\n        if (value === 0) {\r\n            if (board[x][y].revealed === false) {\r\n                board[x][y].revealed = true;\r\n            }\r\n            revealAdjacentCard(board, x, y);\r\n        }\r\n        else if (value >= 1) {\r\n            board[x][y].revealed = true;\r\n        }\r\n\r\n        return board;\r\n    }\r\n\r\n    const indexBoundsCheck = (x, y) => {\r\n        const { grid_w, grid_l } = config[level];\r\n        let isInBound = (x >= 0 && x < grid_w && y >= 0 && y < grid_l);\r\n        return isInBound;\r\n    }\r\n\r\n    const revealAdjacentCard = (board, x, y) => {\r\n        for (let xi = x - 1; xi <= x + 1; xi++) {\r\n            for (let yi = y - 1; yi <= y + 1; yi++) {\r\n                if (indexBoundsCheck(xi, yi) && !board[xi][yi].revealed) {\r\n                    board = revealCard(board, xi, yi);\r\n                }\r\n            }\r\n        }\r\n\r\n        return board;\r\n    }\r\n\r\n    const restart = () => {\r\n        new_Board(level);\r\n        document.getElementById('overlay').style.visibility = \"hidden\";\r\n    }\r\n\r\n    return (\r\n        <div className=\"game\">\r\n            <div className=\"status-bar\">\r\n                <div className=\"Timer\">\r\n                    <Timer gameOver={gameOver} sendTime={setElapsedTime} />\r\n                </div>\r\n                <div className=\"Mine Count\">\r\n                    <span><span role=\"img\" aria-label=\"Flag\">🚩</span>Mine Count:{mineCount} </span>\r\n                </div>\r\n                <div className=\"Move Count\">\r\n                    <span>Move Count:{moveCount} </span>\r\n                </div>\r\n                <div className=\"level\">\r\n                    <span>Level:{level} </span>\r\n                    <button type=\"radio\" onClick={too_easy_mode} >Too_Easy</button>\r\n                    <button type=\"radio\" onClick={easy_mode} defaultChecked >Easy</button>\r\n                    <button type=\"radio\" onClick={kinda_easy_mode}>Kinda_Easy</button>\r\n                </div>\r\n            </div>\r\n            <div className='Board'>\r\n                {board.map((row, key) => {\r\n                    return (\r\n                        <div className=\"d-flex justify-content-center\" key={key}>\r\n                            {row.map((data, key) => {\r\n                                return (\r\n                                    <Card\r\n                                        key={key}\r\n                                        data={data}\r\n                                        updateBoard={updateBoard}\r\n                                        flagCard={flagCard}\r\n                                        incrementMoveCount={incrementMoveCount}\r\n                                        incrementFlagCount={incrementFlagCount}\r\n                                        decrementFlagCount={decrementFlagCount}\r\n                                    />\r\n                                );\r\n                            })}\r\n                        </div>\r\n                    );\r\n                })}\r\n            </div>\r\n            <div id=\"overlay\" onClick={restart}>\r\n                <div id=\"overlayin\">\r\n                    <p id=\"end game message\" className=\"big glow\">Congratulations, you won!!!</p>\r\n                    <p className=\"darker\">It took you <span id=\"moveCount\">0</span> moves.</p>\r\n                    <p className=\"darker\">It took you <span id=\"elapsed time\">{elapsedTime + 1} </span> Seconds.</p>\r\n                    <p className=\"darker\">Click/Press anywhere to restart the game.</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Board;","import React from 'react';\r\nimport './App.css';\r\nimport Board from \"./componenets/Board\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App unselectable\">\r\n      <div className=\"container\">\r\n        <h1>Not MineSweeper</h1>\r\n        <Board />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}