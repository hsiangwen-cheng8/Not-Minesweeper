{"version":3,"sources":["config.js","componenets/Card.js","componenets/Board.js","App.js","index.js"],"names":["config","too_easy","grid_w","grid_l","mine_num","easy","kinda_easy","Card","data","updateBoard","flagCard","incrementMoveCount","incrementFlagCount","style","block","width","height","color","numColorCode","value","display","justifyContent","alignItems","fontWeight","fontSize","cursor","background","revealed","o","Math","round","r","random","toFixed","random_rgba","bombChexPattern","x","y","chexPattern","className","onClick","e","flagged","onContextMenu","preventDefault","onClickFlag","num","Board","useState","board","setBoard","level","setLevel","mineLocation","setMineLocations","moveCount","setMoveCount","setFlagCount","useEffect","new_Board","first_move","subColon","push","populate_Empty_Board","inject_Mines","calculate_Card_Value","create_Board","prevCount","notadjacent","tx","ty","xi","yi","minereveal","mineCount","mine","getRandomInt","surround_mine_num","max","floor","sendEndGameMessage","win","end_game_message","document","getElementById","visibility","innerHTML","updated_board","new_board","first_move_Portection","i","length","revealAllMines","revealCard","checkNonMinesAmount","checkWinGame","non_mine_num","j","revealAdjacentCard","indexBoundsCheck","type","defaultChecked","map","row","key","id","App","html","querySelector","console","log","clientWidth","clientHeight","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.7e43b74d.chunk.js","sourcesContent":["const config = {\r\n    too_easy: {\r\n        grid_w: 4,\r\n        grid_l: 4,\r\n        mine_num: 2\r\n    },\r\n    easy: {\r\n        grid_w: 10,\r\n        grid_l: 8,\r\n        mine_num: 10\r\n    },\r\n    kinda_easy: {\r\n        grid_w: 18,\r\n        grid_l: 14,\r\n        mine_num: 40\r\n    }\r\n}\r\n\r\nexport default config","import React from \"react\";\r\n\r\nexport default function Card({ data, updateBoard, flagCard, incrementMoveCount, incrementFlagCount }) {\r\n  // I stole this function from https://stackoverflow.com/questions/23095637/how-do-you-get-random-rgb-in-javascript\r\n  function random_rgba() {\r\n    var o = Math.round, r = Math.random, s = 255;\r\n    return 'rgba(' + o(r() * s) + ',' + o(r() * s) + ',' + o(r() * s) + ',' + r().toFixed(1) + ')';\r\n  }\r\n\r\n\r\n  const style = {\r\n    block: {\r\n      width: 40,\r\n      height: 40,\r\n      color: numColorCode(data.value),\r\n      display: \"flex\",\r\n      justifyContent: \"center\",\r\n      alignItems: \"center\",\r\n      fontWeight: 800,\r\n      fontSize: 30,\r\n      cursor: \"pointer\",\r\n      background: data.revealed\r\n        ? data.value === \"M\"\r\n          ? random_rgba()\r\n          : bombChexPattern(data.x, data.y)\r\n        : chexPattern(data.x, data.y),\r\n    },\r\n  };\r\n\r\n  const onClickUpdate = (e) => {\r\n    if (data.flagged) {\r\n      return;\r\n    }\r\n    if (!data.revealed) {\r\n      incrementMoveCount();\r\n    }\r\n\r\n    updateBoard(data.x, data.y);\r\n  };\r\n\r\n  const onClickFlag = (e) => {\r\n    e.preventDefault();\r\n    flagCard(data.x, data.y);\r\n    incrementFlagCount();\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"Card\"\r\n      style={style.block}\r\n      onClick={(e) => onClickUpdate(e)}\r\n      onContextMenu={(e) => onClickFlag(e)}\r\n    >\r\n      {data.flagged && !data.revealed ? (\r\n        \"ğŸš©\"\r\n      ) : data.revealed && data.value !== 0 ? (\r\n        data.value === \"M\" ? (\r\n          \"ğŸ’£\"\r\n        ) : (\r\n            data.value\r\n          )\r\n      ) : (\r\n            \"\"\r\n          )}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst chexPattern = (x, y) => {\r\n  if (x % 2 === 0 && y % 2 === 0) {\r\n    return \"#aad751\";\r\n  } else if (x % 2 === 0 && y % 2 !== 0) {\r\n    return \"#a2d249\";\r\n  } else if (x % 2 !== 0 && y % 2 === 0) {\r\n    return \"#a2d249\";\r\n  } else {\r\n    return \"#aad751\";\r\n  }\r\n};\r\n\r\nconst bombChexPattern = (x, y) => {\r\n  if (x % 2 === 0 && y % 2 === 0) {\r\n    return \"#e5c29f\";\r\n  } else if (x % 2 === 0 && y % 2 !== 0) {\r\n    return \"#d7b899\";\r\n  } else if (x % 2 !== 0 && y % 2 === 0) {\r\n    return \"#d7b899\";\r\n  } else {\r\n    return \"#e5c29f\";\r\n  }\r\n};\r\n\r\nconst numColorCode = (num) => {\r\n  if (num === 1) {\r\n    return \"#1976d2\";\r\n  } else if (num === 2) {\r\n    return \"#388d3c\";\r\n  } else if (num === 3) {\r\n    return \"#d33030\";\r\n  } else if (num === 4) {\r\n    return \"#7c21a2\";\r\n  } else if (num === 5) {\r\n    return \"#1976d2\";\r\n  } else if (num === 6) {\r\n    return \"#1976d2\";\r\n  } else {\r\n    return \"white\";\r\n  }\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport config from \"../config\";\r\nimport Card from \"./Card\";\r\n\r\nconst Board = () => {\r\n    const [board, setBoard] = useState([]);\r\n    const [level, setLevel] = useState('too_easy');\r\n    const [mineLocation, setMineLocations] = useState([]);\r\n    const [moveCount, setMoveCount] = useState(0);\r\n    const [flagCount, setFlagCount] = useState(0);\r\n\r\n    useEffect(() => {\r\n        new_Board(level, false);\r\n    }, []);\r\n\r\n    const new_Board = (level, first_move) => {\r\n        const { grid_w, grid_l, mine_num } = config[level];\r\n        const board = create_Board(grid_w, grid_l, mine_num, level, first_move);\r\n        setBoard(board.board);\r\n        setMineLocations(board.mineLocation);\r\n        setMoveCount(0);\r\n    }\r\n\r\n    function create_Board(grid_w, grid_l, mine_num, level, first_move) {\r\n        let board = [];\r\n        let mineLocation = [];\r\n\r\n        board = populate_Empty_Board(grid_w, grid_l, mine_num, board);\r\n\r\n        if (first_move) {\r\n            mineLocation = inject_Mines(grid_w, grid_l, mine_num, board, mineLocation, level);\r\n            board = calculate_Card_Value(grid_w, grid_l, board);\r\n        }\r\n\r\n        return { board, mineLocation };\r\n    }\r\n\r\n    function too_easy_mode() {\r\n        setLevel('too_easy');\r\n        new_Board('too_easy');\r\n    }\r\n\r\n    function easy_mode() {\r\n        setLevel('easy');\r\n        new_Board('easy');\r\n    }\r\n\r\n    function kinda_easy_mode() {\r\n        setLevel('kinda_easy');\r\n        new_Board('kinda_easy');\r\n    }\r\n\r\n    function incrementMoveCount() {\r\n        setMoveCount(prevCount => prevCount + 1);\r\n    }\r\n\r\n    function incrementFlagCount() {\r\n        setFlagCount(prevCount => prevCount + 1);\r\n    }\r\n\r\n    function populate_Empty_Board(grid_w, grid_l, mine_num, board) {\r\n        for (let x = 0; x < grid_w; x++) {\r\n            let subColon = [];\r\n            for (let y = 0; y < grid_l; y++) {\r\n                subColon.push({\r\n                    value: 0,\r\n                    revealed: false,\r\n                    x: x,\r\n                    y: y,\r\n                    flagged: false,\r\n                });\r\n            }\r\n            board.push(subColon);\r\n        }\r\n\r\n        return board;\r\n    }\r\n\r\n    const notadjacent = (x, y, tx, ty) => {\r\n        for (let xi = x - 1; xi <= x + 1; xi++) {\r\n            for (let yi = y - 1; yi <= y + 1; yi++) {\r\n                if (xi === x && yi === y) {\r\n                    continue\r\n                }\r\n                if (tx === xi && ty === yi) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function inject_Mines(grid_w, grid_l, mine_num, board, mineLocation, level, x, y) {\r\n        let minereveal = false;\r\n        if (level === 'too_easy') {\r\n            minereveal = false;\r\n        }\r\n        for (let mineCount = 0; mineCount < mine_num;) {\r\n            // let mine = board[getRandomInt(grid_w - 1)][getRandomInt(grid_l - 1)];\r\n            let mine = board[getRandomInt(grid_w)][getRandomInt(grid_l)];\r\n            if (mine.value === 0 && notadjacent(x, y, mine.x, mine.y) && x !== mine.x && y !== mine.y) {\r\n                mine.value = \"M\";\r\n                mine.revealed = minereveal;\r\n                mineLocation.push([mine.x, mine.y]);\r\n                mineCount++;\r\n            }\r\n        }\r\n\r\n        return mineLocation;\r\n    }\r\n\r\n    function calculate_Card_Value(grid_w, grid_l, board) {\r\n        for (let x = 0; x < grid_w; x++) {\r\n            for (let y = 0; y < grid_l; y++) {\r\n                if (board[x][y].value === \"M\") {\r\n                    continue;\r\n                }\r\n                let surround_mine_num = 0;\r\n                for (let xi = x - 1; xi <= x + 1; xi++) {\r\n                    for (let yi = y - 1; yi <= y + 1; yi++) {\r\n                        if ((xi < 0 || xi >= grid_w) ||\r\n                            (yi < 0 || yi >= grid_l) ||\r\n                            (xi === x && yi === y)) {\r\n                            continue\r\n                        }\r\n                        if (board[xi][yi].value === \"M\") {\r\n                            surround_mine_num++;\r\n                        }\r\n                    }\r\n                }\r\n                board[x][y].value = surround_mine_num;\r\n            }\r\n        }\r\n        return board;\r\n    }\r\n\r\n    function getRandomInt(max) {\r\n        return Math.floor(Math.random() * Math.floor(max));\r\n    }\r\n\r\n    const first_move_Portection = (board, x, y) => {\r\n        if (moveCount === 0) {\r\n            const { grid_w, grid_l, mine_num } = config[level];\r\n            let mineLocation = [];\r\n            let new_board = [...board];\r\n            mineLocation = inject_Mines(grid_w, grid_l, mine_num, new_board, mineLocation, level, x, y);\r\n            new_board = calculate_Card_Value(grid_w, grid_l, new_board);\r\n            setBoard(new_board);\r\n            setMineLocations(mineLocation);\r\n            setMoveCount(1);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    const revealAllMines = (updated_board) => {\r\n        for (let i = 0; i < mineLocation.length; i++) {\r\n            if (!updated_board[mineLocation[i][0]][mineLocation[i][1]].revealed) {\r\n                updated_board[mineLocation[i][0]][mineLocation[i][1]].revealed = true;\r\n                setBoard(updated_board);\r\n            }\r\n        }\r\n    }\r\n\r\n    const checkWinGame = () => {\r\n        const { grid_w, grid_l, mine_num } = config[level];\r\n        return checkNonMinesAmount(grid_w, grid_l) === grid_w * grid_l - mine_num;\r\n    }\r\n\r\n    const sendEndGameMessage = (win) => {\r\n        let end_game_message = 'You suck! You lose!';\r\n        if (win) {\r\n            end_game_message = 'Damn, You Win!';\r\n        }\r\n        document.getElementById('overlay').style.visibility = \"visible\";\r\n        document.getElementById('end game message').innerHTML = end_game_message;\r\n        document.getElementById('moveCount').innerHTML = moveCount + 1;\r\n    }\r\n\r\n    function updateBoard(x, y, e) {\r\n        let updated_board = [...board];\r\n        // Make first move always valid\r\n        first_move_Portection(updated_board, x, y)\r\n        if (updated_board[x][y].value === \"M\") {\r\n            revealAllMines(updated_board);\r\n            sendEndGameMessage(false);\r\n        } else {\r\n            updated_board = revealCard(updated_board, x, y);\r\n            if (!updated_board) {\r\n                return;\r\n            }\r\n            if (checkWinGame()) {\r\n                sendEndGameMessage(true);\r\n            }\r\n        }\r\n    };\r\n\r\n    const checkNonMinesAmount = (grid_w, grid_l) => {\r\n        let non_mine_num = 0;\r\n        for (let i = 0; i < grid_w; i++) {\r\n            for (let j = 0; j < grid_l; j++) {\r\n                if (board[i][j].value != \"M\" && board[i][j].revealed === true) {\r\n                    non_mine_num++;\r\n                }\r\n            }\r\n        }\r\n        return non_mine_num;\r\n    }\r\n\r\n    const flagCard = (x, y) => {\r\n        let updated_board = [...board];\r\n        updated_board[x][y].flagged = !updated_board[x][y].flagged;\r\n        setBoard(updated_board);\r\n    };\r\n\r\n    const revealCard = (board, x, y) => {\r\n        let value = board[x][y].value;\r\n        if (value === 0) {\r\n            if (board[x][y].revealed === false) {\r\n                board[x][y].revealed = true;\r\n            }\r\n            revealAdjacentCard(board, x, y);\r\n        }\r\n        else if (value >= 1) {\r\n            board[x][y].revealed = true;\r\n        }\r\n\r\n        return board;\r\n    }\r\n\r\n    const indexBoundsCheck = (x, y) => {\r\n        const { grid_w, grid_l } = config[level];\r\n        let isInBound = (x >= 0 && x < grid_w && y >= 0 && y < grid_l);\r\n        return isInBound;\r\n    }\r\n\r\n    const revealAdjacentCard = (board, x, y) => {\r\n        for (let xi = x - 1; xi <= x + 1; xi++) {\r\n            for (let yi = y - 1; yi <= y + 1; yi++) {\r\n                if (indexBoundsCheck(xi,yi) && !board[xi][yi].revealed) {\r\n                    board = revealCard(board, xi, yi);\r\n                }\r\n            }\r\n        }\r\n\r\n        return board;\r\n    }\r\n\r\n    const restart = () => {\r\n        new_Board(level);\r\n        document.getElementById('overlay').style.visibility = \"hidden\";\r\n    }\r\n\r\n    return (\r\n        <div className=\"game\">\r\n            <div className=\"status-bar\">\r\n                <div className=\"Move Count\">\r\n                    <span>Move Count:{moveCount} </span>\r\n                </div>\r\n                <div className=\"level\">\r\n                    <span>Level:{level} </span>\r\n                    <button type=\"radio\" onClick={too_easy_mode} >Too_Easy</button>\r\n                    <button type=\"radio\" onClick={easy_mode} defaultChecked >Easy</button>\r\n                    <button type=\"radio\" onClick={kinda_easy_mode}>Kinda_Easy</button>\r\n                </div>\r\n            </div>\r\n            <div className='Board'>\r\n                {board.map((row, key) => {\r\n                    return (\r\n                        <div className=\"d-flex justify-content-center\" key={key}>\r\n                            {row.map((data, key) => {\r\n                                return (\r\n                                    <Card\r\n                                        key={key}\r\n                                        data={data}\r\n                                        updateBoard={updateBoard}\r\n                                        flagCard={flagCard}\r\n                                        incrementMoveCount={incrementMoveCount}\r\n                                        incrementFlagCount={incrementFlagCount}\r\n                                    />\r\n                                );\r\n                            })}\r\n                        </div>\r\n                    );\r\n                })}\r\n            </div>\r\n            <div id=\"overlay\" onClick={restart}>\r\n                <div id=\"overlayin\">\r\n                    <p id=\"end game message\" className=\"big glow\">Congratulations, you won!!!</p>\r\n                    <p className=\"darker\">It took you <span id=\"moveCount\">0</span> moves.</p>\r\n                    <p className=\"darker\">Click/Press anywhere to restart the game.</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Board;","import React from 'react';\nimport './App.css';\nimport Board from \"./componenets/Board\";\n\nfunction App() {\n  let html = document.querySelector(\"html\");\n  console.log(\"Your render area:\", html.clientWidth, \"x\", html.clientHeight)\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <h1>Not MineSweeper</h1>\n        <Board />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}